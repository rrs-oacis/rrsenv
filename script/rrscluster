#!/usr/bin/perl
#
BEGIN { $ENV{PERL_JSON_BACKEND} = 'JSON::PP' }
use Net::OpenSSH; # cpan -i Net::OpenSSH; cpan -i IO::Pty
use JSON; # cpan -i JSON;
use Getopt::Long qw(GetOptionsFromArray :config posix_default no_ignore_case gnu_compat);
use File::Basename;
use Cwd 'realpath';
use strict;
use warnings;
use threads;
use threads::shared;
use Data::Dumper;

my $SCRIPTDIR = realpath(dirname($0));
my $RRSDIR = "/var/tmp/robocup";

my $nodelist = {
	"S" => {"name" => "server"},
	"A" => {"name" => "ambulance"},
	"F" => {"name" => "fire"},
	"P" => {"name" => "police"}};

my $_input = "";
my $_agent = "";
my $_agentA = "";
my $_agentF = "";
my $_agentP = "";
%$nodelist{"A"}->{"agent"} = "";
%$nodelist{"F"}->{"agent"} = "";
%$nodelist{"P"}->{"agent"} = "";
my $cfg_file = './rrscluster.cfg';
my $_logdir = "";
my $_map = "";
my $_is_mod = 0;
my $_is_dev = 0;
my $_is_mod_o = -1;
my $_is_dev_o = -1;
my $_mod_data = "{}";
my $_dev_data = "{}";
my $_use_precompute = 0;

my $argc = @ARGV;
if ($argc < 1)
{
	print_help();
	exit -1;
}

my ($cmd, @opts) = @ARGV;
my ($_verbose, $_password);
GetOptionsFromArray(\@opts,
	"verbose|v" => \$_verbose,
	"input|i=s" => \$_input,
	"password|p=s" => \$_password,
	"config|c=s" => \$cfg_file,
	"logdir|l=s" => \$_logdir,
	"precompute|pre" => \$_use_precompute,
	"ismod|mod" => \$_is_mod_o,
	"isdev|dev" => \$_is_dev_o,
	"map|m=s" => \$_map,
	"agent_a|A=s" => \$_agentA,
	"agent_f|F=s" => \$_agentF,
	"agent_p|P=s" => \$_agentP,
	"agent|a=s" => \$_agent
) or exit(10);

if ($_input ne "")
{
	my $json_input = decode_json(&get_content($_input));

	if ($_verbose)
	{
		print "[INPUT JSON] ".&get_content($_input)."\n";
	}

	%$nodelist{"A"}->{"agent"} = $json_input->{"AGENT_A"};
	%$nodelist{"F"}->{"agent"} = $json_input->{"AGENT_F"};
	%$nodelist{"P"}->{"agent"} = $json_input->{"AGENT_P"};

	if ($_map eq "")
	{
		$_map = $json_input->{"MAP"};
	}

	my $dev_data = {};
	$_mod_data = "\n";
	while (my ($key, $value) = each(%$json_input))
	{
		if ($key =~ /^MOD_/)
		{
			$key =~ s/^MOD_//;
			$_mod_data .= $key." : ".$value."\n";
		}
		elsif ($key =~ /^DEV_/)
		{
			$key =~ s/^DEV_//;
			$dev_data->{$key} = $value;
		}
		elsif ($key eq "USE_PREC")
		{
			$_use_precompute = ($value eq "1" || $value == 1 || lc($value) eq "true");
		}
		elsif ($key eq "IS_MOD")
		{
			$_is_mod = ($value eq "1" || $value == 1 || lc($value) eq "true");
		}
		elsif ($key eq "IS_DEV")
		{
			$_is_dev = ($value eq "1" || $value == 1 || lc($value) eq "true");
		}
	}

	$_dev_data = encode_json($dev_data);
}

%$nodelist{"A"}->{"agent"} = ($_agentA ne "" ? $_agentA : %$nodelist{"A"}->{"agent"});
%$nodelist{"F"}->{"agent"} = ($_agentF ne "" ? $_agentF : %$nodelist{"F"}->{"agent"});
%$nodelist{"P"}->{"agent"} = ($_agentP ne "" ? $_agentP : %$nodelist{"P"}->{"agent"});
if ($_is_mod_o != -1) { $_is_mod = $_is_mod_o; }
if ($_is_dev_o != -1) { $_is_dev = $_is_dev_o; }

if ($_agent ne "")
{
	%$nodelist{"A"}->{"agent"} = $_agent;
	%$nodelist{"F"}->{"agent"} = $_agent;
	%$nodelist{"P"}->{"agent"} = $_agent;
}

if ($_logdir =~ /^(?!.*\/$).*$/)
{
	$_logdir = $_logdir."/";
}
if ($_logdir ne "")
{
	system("mkdir -p ".$_logdir);
}

my $cfg = {};
load_cfg();

if ($_verbose)
{
	print "[AGENT A] ".%$nodelist{"A"}->{"agent"}."\n";
	print "[AGENT F] ".%$nodelist{"F"}->{"agent"}."\n";
	print "[AGENT P] ".%$nodelist{"P"}->{"agent"}."\n";
	print "[MAP] ".$_map."\n";
}

if ($cmd eq "run")
{
	if (%$nodelist{"A"}->{"agent"} eq ""
	|| %$nodelist{"F"}->{"agent"} eq ""
	|| %$nodelist{"P"}->{"agent"} eq ""
	|| $_map eq "") { exit 1; }

	connect_hosts();
	killall();
	preparate();
	if ($_use_precompute)
	{
		precompute();
	}
	start();
	disconnect_hosts();
}
elsif ($cmd eq "kill")
{
	connect_hosts();
	killall();
	disconnect_hosts();
}
elsif ($cmd eq "setup")
{
	connect_hosts();
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"} = threads->new(\&setup_proc, $node->{"alias"});
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"}->join;
	}
	disconnect_hosts();
}
elsif ($cmd eq "check")
{
	connect_hosts();
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"} = threads->new(\&check_proc, $node->{"alias"});
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"}->join;
	}
	disconnect_hosts();
}
elsif ($cmd eq "show-cfg")
{
	if (!cfg_loaded()) { exit 1; }
	print Dumper($cfg)."\n";
}
elsif ($cmd eq "cfg-template")
{
	my $username = $ENV{LOGNAME} || $ENV{USER} || getpwuid($<);
	while (my ($key, $node) = each(%$nodelist))
	{
		$cfg->{$node->{"name"}} = $username.'@localhost';
	}
	$cfg->{"archiver"} = "gzip";

	save_cfg();
}
else
{
	print_help();
}


if ($_verbose)
{
	print "[EXIT] 0\n";
}
exit(0);


sub print_help
{
	print "<HELP>";
	print "\n";
}

sub get_content
{
	my $file = shift;
	open my $fh, '<', $file or die "Cant open file : ".$file;
	my $content = do { local $/; <$fh> };
	close $fh;
	return $content;
}

sub cfg_loaded
{
	return defined($cfg);
}

sub save_cfg
{
	open(OUT, ">$cfg_file") or die "$!";
	my $dumper = Data::Dumper->new([]);
	$dumper->Terse(1);
	$dumper->Values([$cfg]);
	print OUT $dumper->Dump;
	close(OUT);
}

sub load_cfg
{
	if (-e $cfg_file)
	{
		$cfg = do $cfg_file or die "$!$@";
		while (my ($key, $node) = each(%$nodelist))
		{
			$node->{"host"} = $cfg->{$node->{"name"}};
			$node->{"alias"} = uc(substr($node->{"name"}, 0, 1));

			if ($node->{"name"} eq "server")
			{
				$node->{"archiver"} = $cfg->{"archiver"};
			}

			if ($_verbose)
			{
				print "[CONFIG] ".$node->{"name"}." ---> ".$node->{"host"}."\n";
				if ($node->{"name"} eq "server")
				{
					print "[CONFIG] server->archiver ---> ".$node->{"archiver"}."\n";
				}
			}
		}

		return 0;
	}
	else
	{
		undef($cfg);
		return 1;
	}
}

sub get_connect
{
	my ($alias, $pass) = @_;

	my $ssh;

	if (!defined($pass))
	{
		$ssh = Net::OpenSSH->new(
			%$nodelist{$alias}->{"host"},
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$ssh->error and print "@".$alias."20\n";
	}
	else
	{
		$ssh = Net::OpenSSH->new(
			%$nodelist{$alias}->{"host"},
			password => $pass,
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$ssh->error and print "@".$alias."10\n";
	}

	if ($_verbose)
	{
		print "[SSH] ".%$nodelist{$alias}->{"name"}." : ".$ssh->error."\n";
	}

	return $ssh;
}

sub connect_hosts
{
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"ssh"} = Net::OpenSSH->new(
			$node->{"host"},
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$node->{"ssh"}->error and print "@".$node->{"alias"}."20\n";

		if ($_verbose)
		{
			print "[SSH] ".$node->{"name"}." : ".$node->{"ssh"}->error."\n";
		}
	}
}

sub disconnect_hosts
{
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"ssh"}->disconnect();
	}
}

sub setup_proc
{
	my ($alias) = @_;
	my $workdir = $RRSDIR."/".$alias;

	my $hostname = %$nodelist{$alias}->{"host"};
	$hostname =~ s/^.*@//;
	system("ssh-keygen -R ".$hostname);
	system("ssh-keyscan ".$hostname." >>~/.ssh/known_hosts");

	my $ssh = &get_connect($alias);
	{
		my $ssh4pkey = &get_connect($alias, $_password);
		if (! $ssh4pkey->check_master) { return; }
		$ssh4pkey->system("mkdir -p ~/.ssh ; chmod -R 700 ~/.ssh");
		open(PKEY, "< ".$ENV{"HOME"}."/.ssh/id_rsa.pub") or die("error :$!");
		my ($rin, $pid) = $ssh4pkey->pipe_in("cat >>~/.ssh/authorized_keys") or
		die "pipe_in method failed: " . $ssh->error;
		while (my $line = <PKEY>)
		{
			chomp($line);
			print $rin "$line\n";
		}
		close $rin;
		$ssh4pkey->system('awk \'! a[$0]++\' ~/.ssh/authorized_keys > ~/.ssh/authorized_keys.rrsoacis ; mv ~/.ssh/authorized_keys.rrsoacis ~/.ssh/authorized_keys');
		$ssh4pkey->disconnect();

		$ssh->disconnect();
		$ssh = &get_connect($alias);
		if (! $ssh->check_master) { return; }
	}

	$ssh->system("test -d ".$workdir) or
	$ssh->system("mkdir -p ".$workdir." ; chmod -R 777 ".$RRSDIR);

	if ($alias eq "S")
	{
		$ssh->system("test -d ".$workdir."/roborescue") or
		$ssh->scp_put({recursive => 1, quiet => 1}, $SCRIPTDIR."/../roborescue", $workdir."/roborescue");
		$ssh->system("cd /var/tmp/robocup/S/roborescue; ./apache-ant-*/bin/ant clean-all clean oldsims compile jars");
	}
	$ssh->disconnect();
}

sub check_proc
{
	my ($alias) = @_;
	my $workdir = $RRSDIR."/".$alias;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	$ssh->system("test 0") or
	print "@".$alias."21\n";

	$ssh->system("test -d ".$workdir) or
	print "@".$alias."22\n";

	$ssh->system("test -r ".$workdir." -a -w ".$workdir." -a -x ".$workdir) or
	print "@".$alias."23\n";
	$ssh->system("sh -c 'export DISPLAY=:0.0; xhost || echo disabled' | grep -q disabled") or
	print "@".$alias."24\n";

	$ssh->system("sh -c 'java -version 2>&1' | grep -q HotSpot") or
	print "@".$alias."25\n";

	$ssh->system("sh -c 'javac -version 2>&1' | xargs echo "."@".$alias."0") or
	print "@".$alias."26\n";

	if ($alias eq "S")
	{
		my $archive_cmd = "@";
		if ( %$nodelist{$alias}->{"archiver"} eq "gzip") { $archive_cmd = "gzip" }
		elsif ( %$nodelist{$alias}->{"archiver"} eq "7zip") { $archive_cmd = "7za" }
		elsif ( %$nodelist{$alias}->{"archiver"} eq "zip") { $archive_cmd = "zip" }
		$ssh->system("which ".$archive_cmd." || exit 1 && exit 0") or
		print "@".$alias."27\n";
	}
}

sub killall
{
	print "[START] Kill all exist simulation processes\n";
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread_ka"} = threads->new(\&killall_proc, $node->{"alias"});
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread_ka"}->join;
	}
	print "[FINISH] All simulation processes were killed\n";
}

sub killall_proc
{
	my ($alias) = @_;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	$ssh->system("killall java");
	$ssh->system("pkill -f java");

	if ($alias eq "S")
	{
		$ssh->system("killall noGUI-start-precompute.sh");
		$ssh->system("killall noGUI-start-comprun.sh");
		$ssh->system("killall noXterm-start-precompute.sh");
		$ssh->system("killall noXterm-start-comprun.sh");
		$ssh->system("killall start-precompute.sh");
		$ssh->system("killall start-comprun.sh");
		$ssh->system("pkill -f noGUI-start-precompute.sh");
		$ssh->system("pkill -f noGUI-start-comprun.sh");
		$ssh->system("pkill -f noXterm-start-precompute.sh");
		$ssh->system("pkill -f noXterm-start-comprun.sh");
		$ssh->system("pkill -f start-precompute.sh");
		$ssh->system("pkill -f start-comprun.sh");
	}
}

sub preparate
{
	while (my ($key, $node) = each(%$nodelist))
	{
		if ($node->{"alias"} eq "S")
		{ $node->{"thread"} = threads->new(\&preparate_server_proc, $node->{"alias"}); }
		else
		{ $node->{"thread"} = threads->new(\&preparate_agent_proc, $node->{"alias"}); }
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"}->join;
	}
}

sub preparate_server_proc
{
	my ($alias) = @_;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	print $alias.": ".$_map."\n";

	my ($mday,$mon,$year) = (localtime(time))[3..5];
	$year += 1900 - 2000;
	$mon += 1;
	my $datecode = sprintf("%02d%02d%02d", $year, $mon, $mday);

	$ssh->system("rm -rf /var/tmp/robocup/$alias/tmp");
	$ssh->system("mkdir -p /var/tmp/robocup/$alias/tmp");

	print $alias.": [START] Map file uploading will start\n";
	$ssh->system("mkdir -p /var/tmp/robocup/$alias/MAP");
	$ssh->scp_put({recursive => 1, quiet => 1}, $SCRIPTDIR."/../MAP/$_map", "/var/tmp/robocup/$alias/MAP/");
	print $alias.": [FINISH] Map file has uploaded\n";
	$ssh->system("mkdir -p /var/tmp/robocup/$alias/LOG/${datecode}-${_map}");
	$ssh->system("test ! -e /var/tmp/robocup/$alias/LOG/${datecode}-${_map}/${datecode}-${_map}.tar.gz")
		and $ssh->system("sh -c 'cd /var/tmp/robocup/$alias/MAP; tar cvfz /var/tmp/robocup/$alias/LOG/${datecode}-${_map}/${datecode}-${_map}.tar.gz ${_map}'");
}

sub preparate_agent_proc
{
	my ($alias) = @_;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	my $agent = %$nodelist{$alias}->{"agent"};

	print $alias.": ".%$nodelist{$alias}->{"agent"}."\n";

	$ssh->system("rm -rf /var/tmp/robocup/$alias/tmp");
	$ssh->system("mkdir -p /var/tmp/robocup/$alias/tmp");

	print $alias.": [START] Agent file uploading will start\n";
	$ssh->system("mkdir -p /var/tmp/robocup/$alias/AGENT");
	$ssh->system("rm -rf /var/tmp/robocup/$alias/AGENT/$agent");
	$ssh->scp_put({recursive => 1, quiet => 1}, $SCRIPTDIR."/../AGENT/$agent", "/var/tmp/robocup/$alias/AGENT/");
	if ($_is_mod == 1)
	{
		$ssh->system("mkdir -p /var/tmp/robocup/$alias/AGENT/$agent/config");
		my ($rin, $pid) = $ssh->pipe_in("cat >>/var/tmp/robocup/$alias/AGENT/$agent/config/module.cfg") or
		die "pipe_in method failed: " . $ssh->error;
		print $rin $_mod_data;
		close $rin;
	}
	print $alias.": [FINISH] Agent file has uploaded\n";
	print $alias.": [START] Agent compiling will start\n";
	$ssh->system("chmod a+x /var/tmp/robocup/$alias/AGENT/$agent/*.sh");
	$ssh->system("sh -c \"cd /var/tmp/robocup/$alias/AGENT/$agent ; bash ./compile.sh\"");
	print $alias.": [FINISH] Agent has compiled\n";
}

sub precompute
{
	precompute_server_proc();

	while (my ($key, $node) = each(%$nodelist))
	{
		if ($node->{"alias"} ne "S")
		{ $node->{"thread"} = threads->new(\&precompute_agent_proc, $node->{"alias"}); }
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		if ($node->{"alias"} ne "S")
		{ $node->{"thread"}->join; }
	}
	killall();
}

my $start_precompute_proc_rout;
sub precompute_server_proc
{
	my $alias = "S";

	my $ssh = %$nodelist{$alias}->{"ssh"};

	open(OUT, ">$_logdir"."precompute-server.log") or die "$!";

	print $alias.": [START] Simulation server will start for precompute\n";
	my $pid;
	($start_precompute_proc_rout, $pid) = $ssh->pipe_out("sh -c 'export LC_ALL=en_US.UTF-8; export DISPLAY=:0.0; cd /var/tmp/robocup/${alias}/roborescue/boot; ./start-precompute.sh -m ../../MAP/${_map}/map -c ../../MAP/${_map}/config'") or
	die "pipe_out method failed: " . $ssh->error;
	while (<$start_precompute_proc_rout>)
	{
		print OUT $_;
		if ($_ =~ /Start your agents/)
		{
			print $alias.": [FINISH] Simulation server has started\n";
			close(OUT);
			return;
		}
	}
}

sub precompute_agent_proc
{
	my ($alias) = @_;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	open(OUT, ">$_logdir"."precompute-agent".$alias.".log") or die "$!";

	my $f = ($alias eq "F" ? 1 : 0);
	my $p = ($alias eq "P" ? 1 : 0);
	my $a = ($alias eq "A" ? 1 : 0);
	my $server_hostname = %$nodelist{"S"}->{"host"};
	$server_hostname =~ s/^.*@//;

	my $agent = %$nodelist{$alias}->{"agent"};

	print $alias.": ".%$nodelist{$alias}->{"agent"}."\n";

	print $alias.": [START] Agent will start for precompute\n";
	my ($rout, $pid) = $ssh->pipe_out("sh -c 'export LC_ALL=en_US.UTF-8; export DISPLAY=:0.0; cd /var/tmp/robocup/${alias}/AGENT/${agent}; timeout 120 bash ./precompute.sh $f 0 $p 0 $a 0 ${server_hostname} || echo TIMEOUTED'");
	while (<$rout>)
	{
		print OUT $_;
	}
	close(OUT);
	print $alias.": [FINISH] Agent precomputation was ended\n";
}

sub start
{
	start_server_proc();

	while (my ($key, $node) = each(%$nodelist))
	{
		if ($node->{"alias"} ne "S")
		{ $node->{"thread"} = threads->new(\&start_agent_proc, $node->{"alias"}); }
	}

	start_server_closing_proc();

	killall();

	while (my ($key, $node) = each(%$nodelist))
	{
		if ($node->{"alias"} ne "S")
		{ $node->{"thread"}->join(); }
	}
}

my $start_server_proc_rout;
sub start_server_proc
{
	my $alias = "S";

	my $ssh = %$nodelist{$alias}->{"ssh"};

	open(OUT, ">$_logdir"."server.log") or die "$!";

	print $alias.": [START] Simulation server will start for full running\n";
	my $pid;
	($start_server_proc_rout, $pid) = $ssh->pipe_out("sh -c 'export LC_ALL=en_US.UTF-8; export DISPLAY=:0.0; cd /var/tmp/robocup/${alias}/roborescue/boot; ./start-comprun.sh -m ../../MAP/${_map}/map -c ../../MAP/${_map}/config'") or
	die "pipe_out method failed: " . $ssh->error;
	while (<$start_server_proc_rout>)
	{
		print OUT $_;
		if ($_ =~ /Start your agents/)
		{
			print $alias.": [FINISH] Simulation server has started\n";
			close(OUT);
			return;
		}
	}
}

sub start_server_closing_proc
{
	my $alias = "S";

	my ($mday,$mon,$year) = (localtime(time))[3..5];
	$year += 1900 - 2000;
	$mon += 1;
	my $datecode = sprintf("%02d%02d%02d", $year, $mon, $mday);

	my $ssh = %$nodelist{$alias}->{"ssh"};

	open(OUT, ">>$_logdir"."server.log") or die "$!";

	while (<$start_server_proc_rout>)
	{ print OUT $_; }
	close $start_server_proc_rout;
	close(OUT);

	print $alias.": [START] Simulation log data will make\n";
	my $archive_ext = "tar.gz";
	if ( %$nodelist{$alias}->{"archiver"} eq "gzip")
	{
		$archive_ext = "tar.gz";
		$ssh->system("sh -c 'cd /var/tmp/robocup/${alias}/roborescue/boot; tar zcf ../../LOG/${datecode}-${_map}/${datecode}-${_map}-".%$nodelist{"F"}->{"agent"}."-".%$nodelist{"P"}->{"agent"}."-".%$nodelist{"A"}->{"agent"}.".tar.gz logs'");
	}
	elsif ( %$nodelist{$alias}->{"archiver"} eq "7zip")
	{
		$archive_ext = "7z";
		$ssh->system("sh -c 'cd /var/tmp/robocup/${alias}/roborescue/boot; 7za a -m0=lzma2 ../../LOG/${datecode}-${_map}/${datecode}-${_map}-".%$nodelist{"F"}->{"agent"}."-".%$nodelist{"P"}->{"agent"}."-".%$nodelist{"A"}->{"agent"}.".7z logs'");
	}
	elsif ( %$nodelist{$alias}->{"archiver"} eq "zip")
	{
		$archive_ext = "zip";
		$ssh->system("sh -c 'cd /var/tmp/robocup/${alias}/roborescue/boot; zip -r ../../LOG/${datecode}-${_map}/${datecode}-${_map}-".%$nodelist{"F"}->{"agent"}."-".%$nodelist{"P"}->{"agent"}."-".%$nodelist{"A"}->{"agent"}.".zip logs'");
	}
	$ssh->scp_get({recursive => 1, quiet => 1}, "/var/tmp/robocup/S/LOG/${datecode}-${_map}/${datecode}-${_map}-".%$nodelist{"F"}->{"agent"}."-".%$nodelist{"P"}->{"agent"}."-".%$nodelist{"A"}->{"agent"}.".".$archive_ext, $_logdir."simulation_log.".$archive_ext);
	$ssh->system("sh -c 'export LC_ALL=en_US.UTF-8; export DISPLAY=:0.0; cd /var/tmp/robocup/S/roborescue/boot; mkdir -p /var/tmp/robocup/S/tmp/extracts; ./logextract.sh ./logs/rescue.log /var/tmp/robocup/S/tmp/extracts'");
	$ssh->scp_get({recursive => 1, quiet => 1}, "/var/tmp/robocup/S/tmp/extracts", $_logdir."extracts");
	open(OUT, ">$_logdir"."score.txt") or die "$!";
	my ($rout, $pid) = $ssh->pipe_out("sh -c 'cd /var/tmp/robocup/${alias}/roborescue/boot; sh ./print-lastscore.sh'");
	while (<$rout>)
	{ print OUT $_; }
	close(OUT);

	open(OUT, ">$_logdir"."_output.json") or die "$!";
	my $output_data->{"Score"} = 0 + &get_content($_logdir."extracts/final-score.txt");
	print OUT encode_json($output_data);
	close(OUT);

	print $alias.": [FINISH] Simulation log data has make\n";
}

sub start_agent_proc
{
	my ($alias) = @_;

	my $ssh = %$nodelist{$alias}->{"ssh"};

	my $f = ($alias eq "F" ? -1 : 0);
	my $p = ($alias eq "P" ? -1 : 0);
	my $a = ($alias eq "A" ? -1 : 0);
	my $server_hostname = %$nodelist{"S"}->{"host"};
	$server_hostname =~ s/^.*@//;

	my $agent = %$nodelist{$alias}->{"agent"};

	print $alias.": ".%$nodelist{$alias}->{"agent"}."\n";

	open(OUT, ">$_logdir"."agent".$alias.".txt") or die "$!";

	print $alias.": [START] Agent will start for full running\n";
	my ($rout, $pid) = $ssh->pipe_out("sh -c 'export LC_ALL=en_US.UTF-8; export DISPLAY=:0.0; cd /var/tmp/robocup/".$alias."/AGENT/".$agent."; bash ./start.sh ".$f." ".$f." ".$p." ".$p." ".$a." ".$a." ".$server_hostname."'");
	while (<$rout>)
	{ print OUT $_; }
	close(OUT);
	print $alias.": [FINISH] Agent full running was ended\n";
}
