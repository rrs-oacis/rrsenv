#!/usr/bin/perl
#
use Net::OpenSSH; # cpan -i Net::OpenSSH; cpan -i IO::Pty
use Getopt::Long qw(GetOptionsFromArray :config posix_default no_ignore_case gnu_compat);
use File::Basename;
use Cwd 'realpath';
use strict;
use warnings;
use threads;
use Data::Dumper;

my $SCRIPTDIR = realpath(dirname($0));
my $RRSDIR = "/var/tmp/robocup";

my $nodelist = {
	"S" => {"name" => "server"},
	"A" => {"name" => "ambulance"},
	"F" => {"name" => "fire"},
	"P" => {"name" => "police"}};

my $argc = @ARGV;
if ($argc < 1)
{
	print_help();
	exit -1;
}

my ($cmd, @opts) = @ARGV;
my ($_verbose, $_password);
GetOptionsFromArray(\@opts,
	"verbose|v" => \$_verbose,
	"password|p=s" => \$_password
) or exit(10);

my $cfg = {};
my $cfg_file = './rrscluster.cfg';
load_cfg();



if ($cmd eq "set")
{
}
elsif ($cmd eq "setup")
{
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"} = threads->new(\&setup_proc, $node->{"alias"});
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"}->join;
	}
}
elsif ($cmd eq "check")
{
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"} = threads->new(\&check_proc, $node->{"alias"});
	}
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"thread"}->join;
	}
}
elsif ($cmd eq "show-cfg")
{
	if (!cfg_loaded()) { exit 1; }
	print Dumper($cfg)."\n";
}
elsif ($cmd eq "cfg-template")
{
	my $username = $ENV{LOGNAME} || $ENV{USER} || getpwuid($<);
	while (my ($key, $node) = each(%$nodelist))
	{
		$cfg->{$node->{"name"}} = $username.'@localhost';
	}
	$cfg->{"archiver"} = "gzip";

	save_cfg();
}
else
{
	print_help();
}

exit 0;


my $host = 'takamin@localhost';

my $ssh = Net::OpenSSH->new($host,
	batch_mode => 1,
	master_opts => [ -o => "StrictHostKeyChecking=no"]);
$ssh->error and exit(100);

$ssh->system("ls /tmp") or
die "remote command failed: " . $ssh->error;

my @ls = $ssh->capture("ls");
$ssh->error and
die "remote ls command failed: " . $ssh->error;

my ($out, $err) = $ssh->capture2("echo ok");
$ssh->error and
die "remote find command failed: " . $ssh->error;

my ($rin, $pid) = $ssh->pipe_in("cat >/tmp/foo") or
die "pipe_in method failed: " . $ssh->error;

print $rin "hello\n";
close $rin;

my ($rout, $pid2) = $ssh->pipe_out("cat /tmp/foo") or
die "pipe_out method failed: " . $ssh->error;

while (<$rout>) { print }
close $rout;

my ($in, $out2 ,$pid3) = $ssh->open2("foo");

print $in."\n";
print $out2."\n";
print $pid3."\n";


sub print_help
{
	print "<HELP>";
	print "\n";
}

sub cfg_loaded
{
	return defined($cfg);
}

sub save_cfg
{
	open(OUT, ">$cfg_file") or die "$!";
	my $dumper = Data::Dumper->new([]);
	$dumper->Terse(1);
	$dumper->Values([$cfg]);
	print OUT $dumper->Dump;
	close(OUT);
}

sub load_cfg
{
	if (-e $cfg_file)
	{
		$cfg = do $cfg_file or die "$!$@";
		while (my ($key, $node) = each(%$nodelist))
		{
			$node->{"host"} = $cfg->{$node->{"name"}};
			$node->{"alias"} = uc(substr($node->{"name"}, 0, 1));

			if ($node->{"name"} eq "server")
			{
				$node->{"archiver"} = $cfg->{"archiver"};
			}

			if ($_verbose)
			{
				print "[CONFIG] ".$node->{"name"}." ---> ".$node->{"host"}."\n";
				if ($node->{"name"} eq "server")
				{
					print "[CONFIG] server->archiver ---> ".$node->{"archiver"}."\n";
				}
			}
		}

		return 0;
	}
	else
	{
		undef($cfg);
		return 1;
	}
}

sub get_connect
{
	my ($alias, $pass) = @_;

	if (!defined($pass))
	{
		$ssh = Net::OpenSSH->new(
			%$nodelist{$alias}->{"host"},
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$ssh->error and print "@".$alias."20\n";
	}
	else
	{
		$ssh = Net::OpenSSH->new(
			%$nodelist{$alias}->{"host"},
			password => $pass,
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$ssh->error and print "@".$alias."10\n";
	}

	if ($_verbose)
	{
		print "[SSH] ".%$nodelist{$alias}->{"name"}." : ".$ssh->error."\n";
	}

	return $ssh;
}

sub connect_hosts
{
	while (my ($key, $node) = each(%$nodelist))
	{
		$node->{"ssh"} = Net::OpenSSH->new(
			$node->{"host"},
			batch_mode => 1,
			master_opts => [ -o => "StrictHostKeyChecking=no"]);
		$node->{"ssh"}->error and print "@".$node->{"alias"}."20\n";

		if ($_verbose)
		{
			print "[SSH] ".$node->{"name"}." : ".$node->{"ssh"}->error."\n";
		}
	}
}

sub setup_proc
{
	my ($alias) = @_;
	my $workdir = $RRSDIR."/".$alias;

	system("rm -f ~/.ssh/known_hosts");

	my $ssh = &get_connect($alias);
	{
		my $ssh4pkey = &get_connect($alias, $_password);
		if (! $ssh4pkey->check_master) { return; }
		$ssh4pkey->system("mkdir -p ~/.ssh ; chmod -R 700 ~/.ssh");
		open(PKEY, "< ".$ENV{"HOME"}."/.ssh/id_rsa.pub") or die("error :$!");
		my ($rin, $pid) = $ssh4pkey->pipe_in("cat >>~/.ssh/authorized_keys") or
		die "pipe_in method failed: " . $ssh->error;
		while (my $line = <PKEY>)
		{
			chomp($line);
			print $rin "$line\n";
		}
		close $rin;
		$ssh4pkey->system('awk \'! a[$0]++\' ~/.ssh/authorized_keys > ~/.ssh/authorized_keys.rrsoacis ; mv ~/.ssh/authorized_keys.rrsoacis ~/.ssh/authorized_keys');
		$ssh4pkey->disconnect();

		$ssh = &get_connect($alias);
		if (! $ssh->check_master) { return; }
	}

	$ssh->system("test -d ".$workdir) or
	$ssh->system("mkdir -p ".$workdir." ; chmod -R 777 ".$RRSDIR);

	if ($alias eq "S")
	{
		$ssh->system("test -d ".$workdir."/roborescue") or
		$ssh->scp_put({recursive => 1, quiet => 1}, $SCRIPTDIR."/../roborescue", $workdir."/roborescue");
	}
}

sub check_proc
{
	my ($alias) = @_;
	my $workdir = $RRSDIR."/".$alias;

	my $ssh = &get_connect($alias);
	if (! $ssh->check_master) { return; }

	$ssh->system("test 0") or
	print "@".$alias."21\n";

	$ssh->system("test -d ".$workdir) or
	print "@".$alias."22\n";

	$ssh->system("test -r ".$workdir." -a -w ".$workdir." -a -x ".$workdir) or
	print "@".$alias."23\n";

	$ssh->system("sh -c 'export DISPLAY=:0.0; xhost || echo disabled' | grep -q disabled") or
	print "@".$alias."24\n";

	$ssh->system("sh -c 'java -version 2>&1' | grep -q HotSpot") or
	print "@".$alias."25\n";

	$ssh->system("sh -c 'javac -version 2>&1' | xargs echo "."@".$alias."0") or
	print "@".$alias."26\n";

	if ($alias eq "S")
	{
		my $archive_cmd = "@";
		if ( %$nodelist{$alias}->{"archiver"} eq "gzip") { $archive_cmd = "gzip" }
		elsif ( %$nodelist{$alias}->{"archiver"} eq "7zip") { $archive_cmd = "7za" }
		elsif ( %$nodelist{$alias}->{"archiver"} eq "zip") { $archive_cmd = "zip" }
		$ssh->system("which ".$archive_cmd." || exit 1 && exit 0") or
		print "@".$alias."27\n";
	}
}

sub server_proc
{
	%$nodelist{"S"}->{"ssh"}->system("ls");
}

sub client_proc
{
}

